@inject UserSessionService UserSessionService
@inject NavigationManager Navigation
<!-- we are using the IDisposable interface to change OnLoginStateChanged event when the UserSessionService component is disposed of. -->
<!-- the IDisposable interface "Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources." -->

<!-- Navigation menu -->
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorBankApp</a>
    </div>
</div>

<nav class="flex-column nav-scrollable">
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            Home
        </NavLink>
    </div>
        
        
        <!-- we check if he user session is not logged in  we display the login and singup navigation links -->
        @if (!UserSessionService.IsLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="signup">
                    <span class="bi bi-pencil-square" aria-hidden="true"></span> Signup
                </NavLink>
            </div>
        }
        <!-- we check if the user session is logged in so we display the bank and logout Navigation Links -->
        @if (UserSessionService.IsLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="bank">
                    <span class="bi bi-bank" aria-hidden="true"></span> Bank
                </NavLink>
            </div>
        <!-- onClick handler to handle the logout method -->
            <div class="nav-item px-3">
                <button class="btn btn-link nav-link" @onclick="Logout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                </button>
            </div>
        }
    </nav>


@code {
    
    // this private logout method is created to handle the onClick event handler,
    //  once we create this method we can directly use it in onClick without calling this method.
    private void Logout()
    {
        UserSessionService.Logout();
        Navigation.NavigateTo("/");
        StateHasChanged();
        // StateHasChanged re-render the component (pages) to check if the UI has changed if so it update the current state.
    }

    // the method below are used to subscribe to the OnLoginStateChanged event when this component is initialized.
    // The event will trigger whenever the users login status changes, thus updating this navmenu by calling the StateHasChanged method.
    protected override void OnInitialized() //This will override the Abstract OnInitialized method from the ComponentBase class.
    { 
        // When the Navbar is loaded, the OnLoginStateChanged event from the UserSessionService class is subscribed to (+= operator).
        // This creates a pointer to the StateHasChanged method, which will be called whenever the OnLoginStateChanged event is triggered.
        // Hamedani, M. (Director). (2015). Events and Delegates—C# Advanced Course [Video recording].
        UserSessionService.OnLoginStateChanged += StateHasChanged;
    }
}
