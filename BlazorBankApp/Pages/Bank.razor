@page "/bank"
<!-- allowing the bank component to access the methods and properties of BankService and UserSessionService classes through dependency injection.-->
<!-- It injects the object into this component, so that the objects lifetime can be manipulated (persistent in this use case)-->
@inject AccountService AccountService
@inject UserSessionService UserSessionService
<!-- Dependency injection is a technique in which an object receives other objects that it depends on. This results in loosely coupled components, and shared instances of services.
 In Blazor, we can inject services into components, pages, and other classes. It is a simplified way of injecting an object into this component through a constructor, which blazor does behind the scenes
 Julio Casal (Director). (2024, March 27, 2:32). Blazor Full Course For Beginners [Video recording]. https://www.youtube.com/watch?v=RBVIclt4sOo
 -->

<!-- Check if the user is logged in with the UserSessionService. If they are, show their Account, Otherwise show Please login -->
@if (UserSessionService.IsLoggedIn) // if the user exists then render the following html code block
{
    // The currentUser username fetched from the UserSessionService instance (injected above)
    <h3 align="center">Welcome, @UserSessionService.CurrentUser.Username</h3>
    // displaying the current balance in the bank component
    <div class="row d-flex justify-content-center align-items-center">
        <div class="col-md-6 align-items-center">
            <div class="form-group">
                <label for="balance">Everyday Access Account:</label>
                <!-- with @symbol we can display serverside C# properties such as the balance of the users bank account -->
                <input id="balance" class="form-control" value="@_everydayBalance" disabled/>
            </div>

            <div class="form-group">
                <label for="balance">Savings Account:</label>
                <!-- with @symbol we can display serverside C# properties such as the balance of the users bank account -->
                <input id="balance" class="form-control" value="@_savingsBalance" disabled/>
            </div>

            <div class="form-group">
                <label for="amount">Amount</label>
                <!-- the InputNumber is blazor built-in component for a Numerical Input Field. The @bind-Value is used to
                 link the Field to the corresponding C# Properties below -->
                <InputNumber id="amount" class="form-control" @bind-Value="_amount"/>
            </div>
            <!-- Buttons to trigger deposit and withdraw actions
                In Blazor, the @onclick is used to bind an event handler to the onclick event of an HTML element.
                when the event handler clicked, it calls the method of deposit and withdraw from BankService class.-->
            <div class="py-1 d-flex justify-content-center align-items-center">
                <button class="btn btn-primary w-100" @onclick="Deposit">Deposit</button>
                <button class="btn btn-secondary w-100" @onclick="Withdraw">Withdraw</button>
            </div>
            <!-- The bootstrap classes are used to align the elements neatly. "d-flex justify-content-center align-items-center"
            will align the content in the center of the div. "w-100" will span the buttons the entire width of the div -->
            <div class="d-flex justify-content-center align-items-center">
                <button class="btn btn-primary w-100" @onclick="ToSavings">Transfer to Savings</button>
                <p/>
                <button class="btn btn-secondary w-100" @onclick="ToEveryday">Transfer to Everyday</button>
            </div>

            <p class="alert-success" /><h5 class="mt-3">@_message</h5>
        </div>
    </div>
    // this message will be displayed after a banking operation is performed
}
// As mentioned at the beginning of the conditional code block, if the user is not logged in, show the following message:
else
{
    <p>Please log in to access your bank account.</p>
}


@*if (!(BankService.Withdraw(_amount) || BankService.Transfer(_amount)))
{ //TODO review this commented code block
<p class="alert-success">Banking operation success!</p>
} else
{
<p class="alert-danger">Banking operation failed. Please try again!</p>
} *@


@code { // The C# code block for the Bank component
    
    // The private fields used in the Bank component, bound to the HTML input fields and used to display the balance and messages
    private double _everydayBalance;
    private double _savingsBalance;
    private double _amount;
    private string? _message; // The message to display after a deposit or withdrawal, with a nullable string type
    
    private EverydayAccount? Everyday;
    private SavingsAccount? Savings;
    
    // this method is used to set up initial state and perform necessary logic as soon as the component is initialised
    // in this case we need to check first the user login is logged in and the user balance is set to the initialise value which should be 0
    protected override void OnInitialized()
    {
        if (UserSessionService.IsLoggedIn)
        {
            var userInfo = UserSessionService.GetCurrentUser();
            if (userInfo != null)
            {
                var accounts = AccountService.GetUserAccounts(userInfo.Email) ?? new List<BankAccount>();
                // using the OfType method to filter the accounts list to ensure that we return either the correct type of account
                // and assign it to the Everyday and Savings fields. If the account does not exist, create a new account with the user's username
                // using the null-coalescing operators (??) to assign a default value of 0 to the balance
                Everyday = accounts.OfType<EverydayAccount>().FirstOrDefault() ?? new EverydayAccount("EA123", userInfo.Username, 0);
                Savings = accounts.OfType<SavingsAccount>().FirstOrDefault() ?? new SavingsAccount("SA123", userInfo.Username, 0);
                // if the accounts list does not contain the Everyday and Savings accounts, add them to the list
                if (!accounts.Contains(Everyday)) accounts.Add(Everyday);
                if (!accounts.Contains(Savings)) accounts.Add(Savings);
                // Then save the updated list of accounts to the user's email address using a dictionary key-value pair
                // The key is the user's email address and the value is the list of accounts, associating the account data
                // with their email address
                AccountService.SetUserAccounts(userInfo.Email, accounts);
                UpdateBalance();
            }
        }
    }
    
    // this method is private method which means we use it within this component only.
    // it employs the encapsulated methods from the BankService class to perform a deposit and withdraw actions
    private void Deposit()
    {
        // check if the user is logged in and the user has an everyday account balance before proceeding
        if (Everyday != null) 
            // Execute the Deposit method from BankService class with the amount deposited by the user
            Everyday.Deposit(_amount, Everyday);
            // get the new balance value
            UpdateBalance();
            // display message based on the calculated amount and new balance from UpdateBalance();
            _message = $"Deposited {_amount}. New balance is {_everydayBalance}.";
            // set the amount back to 0 after user click on Deposit button. 
            _amount = 0;
    }
    
    // Just like the Deposit method, this method is used to withdraw an amount from the user's bank account
    private void Withdraw()
    {
        // first we need to check conditionally to ensure that the user is input an amount or is set to 0
        // also check if user has sufficient funds, and the user is logged in.
        if (Everyday != null && Everyday.Withdraw(_amount, Everyday))
        {
            // get the assigned balance value from updateBalance method
            UpdateBalance();
            // display message based on the calcuated amount and new balance that already got from UpdateBalance();
            _message = $"Withdrew {_amount}. New balance is {_everydayBalance}.";
        }
        // otherwise the user didn't input any value == 0 or the balance is not sufficient to withdrew.
        else
        {
            _message = "Not sufficient funds available.";
        }
        // set the amount to 0 after user click on Withdraw button
        _amount = 0;
    }

    //TODO add comments to the following transfer methods:
    private void ToSavings()
    {
        if (Everyday != null && Savings != null && Everyday.Transfer(_amount, Savings, Everyday))
        {
            UpdateBalance();
            
            _message = $"Transferred {_amount} from Everyday Access to Savings.";
        }
        else
        {
            _message = "Not sufficient funds available.";
        }
        
    }
    
    private void ToEveryday()
    {
        if (Savings != null && Everyday != null && Savings.Transfer(_amount, Everyday, Savings))
        {
            UpdateBalance();
            _message = $"Transferred {_amount} from Savings to Everyday Access.";
        }
        else
        {
            _message = "Not sufficient funds available.";
        }
    }
    
    // this method updates the balance value by calling the GetBalance method from the BankService class,
    // called after a deposit or withdrawal
    
    private void UpdateBalance()
    {
        // check if the user is logged in and the user has and their accounts exist before proceeding
        if (Everyday != null && Savings != null)
        {
            _everydayBalance = Everyday.Balance;
            _savingsBalance = Savings.Balance;
            // save the updated balance to the user's account using the SaveBalance method
            SaveBalance();
        }
        else
        {
            _everydayBalance = 0;
            _savingsBalance = 0;
            _message = "Account(s) not found. Please contact support.";
        }
    }
    
    private void SaveBalance()
    // This method will associate the user's bank accounts and balances with their email address and store it in the AccountService
    {
        var userInfo = UserSessionService.GetCurrentUser();
        if (userInfo != null)
        {
            // create a list of accounts to store the user's bank accounts
            // the objects passed into the list must not be null (asserted by the bang operator)
            var accounts = new List<BankAccount> { Everyday!, Savings! };
            AccountService.SetUserAccounts(userInfo.Email, accounts);
        }
    }
}
