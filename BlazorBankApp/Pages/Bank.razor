<!-- Pages/Bank.razor -->
@page "/bank"

<!-- allowing the bank component to access the methods and properties of BankService and UserSessionService classes.
and we assign them to local varibales.
-->
@inject BankService BankService
@inject UserSessionService UserSessionService

<!-- Check conditionally to show the content based on the user's login status -->
@if (UserSessionService.IsLoggedIn) // if the user is exist then show below contents
{
    // get the currentUser username from the class of UserSessionService which we aleady injected from the top of this bank page component.
    <div>
        <h3>Welcome, @UserSessionService.CurrentUser.Username</h3>
    </div>
    // displaying the current balance in the bank component
    <div class="form-group">
        <label for="balance">Current Balance</label>
        <!-- with @symbol we can access the desire code that we want to present in this case @balance from bank services -->
        <input id="balance" class="form-control" value="@balance" disabled />
    </div>

    <div class="form-group">
        <label for="amount">Amount</label>
        <!-- the InputNumber is blazor built-in comonent that present numeric values 
        the @bind-Value is used to update the amount of deposit and withdraow methods -->
        <InputNumber id="amount" class="form-control" @bind-Value="amount" />
    </div>
    <!-- Buttons to trigger deposit and withdraw actions
        In Blazor, the @onclick is used to bind an event handler to the onclick event of an HTML element.
        when the event handler clicked, it calls the method of deposit and withdraw from BankService class.
    -->
    <button class="btn btn-primary" @onclick="Deposit">Deposit</button>
    <button class="btn btn-secondary" @onclick="Withdraw">Withdraw</button>
    
    <h5 class="mt-3">@message</h5>
}
//this condition is realted to if which checked on above for user exist it check opposit condition if the user is not exsit in this case ask the user to login
else
{
    <p>Please log in to access your bank account.</p>
}


@code {
    
    private double balance;
    private double amount;
    private string message;

    // this method is used to set up initial state and perform necessary logic as soon as the component is initialised
    // in this case we need to check first the user login is logged in and the user balance is set to the initialise value which should be 0
    protected override void OnInitialized()
    {
        if (UserSessionService.IsLoggedIn)
        {
            balance = BankService.GetBalance();
        }
    }
    // this method is private method which means we use it within this component only.
    // it get the methods from the bank service class and it's method of deposit to calculate the user amount and balance.
    private void Deposit()
    {
        // get the Deposit method from BankSerive class and their initialise valie as arrgumennt it this cas is amount.
        BankService.Deposit(amount);
        // get the assigned balance value from updateBalnance method 
        UpdateBalance();
        // display message based on the calcuated amount and new balance that already got from UpdateBalance();
        message = $"Deposited {amount}. New balance is {balance}.";
        // set the amount to 0 after user click on Deposit button. 
        amount = 0;
    }

    // this method is private method which means we use it within this component only.
    // it get the methods from the bank service class and it's method of Withdraw to calculate the user amount and balance.
    private void Withdraw()
    {
        // first we need to check conditionally to ensure that the user is input an amount or is set to 0 this also check if user is has sufficient funds.
        if (BankService.Withdraw(amount))
        {
            // get the assigned balance value from updateBalnance method
            UpdateBalance();
            // display message based on the calcuated amount and new balance that already got from UpdateBalance();
            message = $"Withdrew {amount}. New balance is {balance}.";
        }
        // otherwise the user didn't input any value == 0 or the balance is not sufficient to withdrew.
        else
        {
            message = "Not sufficient funds available.";
        }
        // set the amount to 0 after user click on Withdraw button
        amount = 0;
    }

    // this method is private method which means we use it within this component only.
    // this method only get the balance from BankService class and return the set value of balance.
    private void UpdateBalance()
    {
        balance = BankService.GetBalance();
    }
}
