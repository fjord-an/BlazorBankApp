@page "/bank"
<!-- allowing the bank component to access the methods and properties of BankService and UserSessionService classes through dependency injection.-->
@inject BankService BankService
@inject UserSessionService UserSessionService
<!-- Dependency injection is a technique in which an object receives other objects that it depends on. This results in loosely coupled components, and shared instances of services.
 In Blazor, we can inject services into components, pages, and other classes. It is a simplified way of injecting an object into this component through a constructor, which blazor does behind the scenes
 Julio Casal (Director). (2024, March 27, 2:32). Blazor Full Course For Beginners [Video recording]. https://www.youtube.com/watch?v=RBVIclt4sOo
 -->

<!-- Check if the user is logged in with the UserSessionService. If they are, show their Account, Otherwise show Please login -->
@if (UserSessionService.IsLoggedIn) // if the user exists then show below contents
{
    // The currentUser username fetched from the UserSessionService instance (injected above)
        <h3>Welcome, @UserSessionService.CurrentUser.Username</h3>
    // displaying the current balance in the bank component
    <div class="form-group">
        <label for="balance">Current Balance</label>
        <!-- with @symbol we can display serverside C# properties such as the balance of the users bank account -->
        <input id="balance" class="form-control" value="@_balance" disabled />
    </div>

    <div class="form-group">
        <label for="amount">Amount</label>
        <!-- the InputNumber is blazor built-in component for a Numerical Input Field. The @bind-Value is used to
         link the Field to the corresponding C# Properties below -->
        <InputNumber id="amount" class="form-control" @bind-Value="_amount" />
    </div>
    <!-- Buttons to trigger deposit and withdraw actions
        In Blazor, the @onclick is used to bind an event handler to the onclick event of an HTML element.
        when the event handler clicked, it calls the method of deposit and withdraw from BankService class.-->
    <button class="btn btn-primary" @onclick="Deposit">Deposit</button>
    <button class="btn btn-secondary" @onclick="Withdraw">Withdraw</button>
    
    <h5 class="mt-3">@_message</h5> // this message will be displayed after a deposit or withdrawal
}
// As mentioned at the beginning of the conditional code block, if the user is not logged in, show the following message:
else
{
    <p>Please log in to access your bank account.</p>
}


@code {
    
    // The private fields used in the Bank component, bound to the HTML input fields and used to display the balance and messages
    private double _balance;
    private double _amount;
    private string? _message; // The message to display after a deposit or withdrawal, with a nullable string type

    
    // this method is used to set up initial state and perform necessary logic as soon as the component is initialised
    // in this case we need to check first the user login is logged in and the user balance is set to the initialise value which should be 0
    protected override void OnInitialized()
    {
        if (UserSessionService.IsLoggedIn)
        {
            _balance = BankService.GetBalance();
        }
    }
    
    // this method is private method which means we use it within this component only.
    // it employs the encapsulated methods from the BankService class to perform a deposit and withdraw actions
    private void Deposit()
    {
        // Execute the Deposit method from BankService class with the amount deposited by the user
        BankService.Deposit(_amount);
        // get the new balance value
        UpdateBalance();
        // display message based on the calculated amount and new balance from UpdateBalance();
        _message = $"Deposited {_amount}. New balance is {_balance}.";
        // set the amount back to 0 after user click on Deposit button. 
        _amount = 0;
    }
    
    // Just like the Deposit method, this method is used to withdraw an amount from the user's bank account
    private void Withdraw()
    {
        // first we need to check conditionally to ensure that the user is input an amount or is set to 0 this also check if user is has sufficient funds.
        if (BankService.Withdraw(_amount))
        {
            // get the assigned balance value from updateBalnance method
            UpdateBalance();
            // display message based on the calcuated amount and new balance that already got from UpdateBalance();
            _message = $"Withdrew {_amount}. New balance is {_balance}.";
        }
        // otherwise the user didn't input any value == 0 or the balance is not sufficient to withdrew.
        else
        {
            _message = "Not sufficient funds available.";
        }
        // set the amount to 0 after user click on Withdraw button
        _amount = 0;
    }
    
    // this method updates the balance value by calling the GetBalance method from the BankService class,
    // called after a deposit or withdrawal
    private void UpdateBalance()
    {
        _balance = BankService.GetBalance();
    }
}
