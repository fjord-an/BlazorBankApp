@page "/login"
@using BlazorBankApp.Models
@using BlazorBankApp.Services
@inject BankService BankService
@inject UserSessionService UserSessionService
@inject NavigationManager Navigation

<h3>Login</h3>
<!-- if isLockedOut true show below message instead of login forms-->
@if (isLockedOut)
{
    <h5 class="text-danger">Too many incorrect attempts. Please try again in 1 minute.</h5>
}
//otherwise the user can still attempt the login
else
{
    <!-- EditForm component to handle user input and form validation
    the login model has the User model instance that can handle user properties.
    -->
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <!-- Validator for data annotations and validation errors-->
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Input fields for user data with bootstrap classes -->
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" disabled="@(loginAttempts >= 3)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" disabled="@(loginAttempts >= 3)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
    // check if the login boolean is false show user a message and show the number of attempts.
    @if (loginFailed)
    {
        <p class="text-danger">Login failed. Please try again.</p>
        <h5>Attempt: @loginAttempts of 3</h5>
    }
}


@code {
    // access to User Model data or User class and create new instance
    private User loginModel = new User();
    // create a variable of boolean type to check if login faild or success
    private bool loginFailed;

    private int loginAttempts = 0;
    private bool isLockedOut = false;

    private async void HandleLogin()
    {
        try
        {
            if (loginAttempts >= 3)
            {
                isLockedOut = true;
                loginFailed = false;
                await Task.Delay(TimeSpan.FromMinutes(1));
                loginAttempts = 0;
                isLockedOut = false;
                StateHasChanged();
                return;
            }

            // we conditionallly check if the user login method which comes from BankService class with method of Login has the user model or user class
            // and if the email and the password that user input is assign with the user email and passowrd 
            var user = BankService.Login(loginModel.Email, loginModel.Password);
            // if is not null or false
            if (user != null)
            {
                // Call the Login method from UserSessionService to set the user as logged in
                UserSessionService.Login(user);
                // Navigate to the /bank page using the built-in razor NavigationManager component which is injected at the top of the page.
                Navigation.NavigateTo("/bank");
                loginAttempts = 0;
                loginFailed = false;
            }
            // otherwise the user false and it stay on the same page of the login.
            else
            {
                loginAttempts++;
                loginFailed = true;
            }
        }catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            loginFailed = true;
        }
        StateHasChanged();
    }
}
