<!-- Pages/Signup.razor -->
@page "/signup"
<!-- Import the required dependencies to use in the Signup component -->
@inject AccountService Credentials
@inject NavigationManager Navigation

<h3 align="center">Signup</h3>
<!-- EditForm component to handle user input and form validation -->
<EditForm Model="_signupModel" OnValidSubmit="HandleSignup">
    <!-- Validator for data annotations and validation errors-->
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Input fields for user data with bootstrap classes -->
    <div class="row d-flex justify-content-center align-items-center">
        <div class="col-md-6 align-items-center">
            <div class="form-group">
                <label for="username">Username*</label>
                <InputText id="username" class="form-control" @bind-Value="_signupModel.Username" />
            </div>

            <div class="form-group">
                <label for="email">Email*</label>
                <InputText id="email" class="form-control" @bind-Value="_signupModel.Email" />
            </div>

            <div class="form-group">
                <label for="age">Age*</label>
                <InputNumber id="age" class="form-control" @bind-Value="_signupModel.Age" />
            </div>

            <div class="form-group">
                <label for="phone">Phone</label>
                <InputText id="phone" class="form-control" @bind-Value="_signupModel.Phone" />
            </div>

            <div class="form-group">
                <label for="password">Password*</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="_signupModel.Password" />
            </div>
            
            <div class="py-2 d-flex justify-content-center align-items-center">
                <button type="submit" class="btn btn-primary w-50">Signup</button>
            </div>
        </div>
    </div>
</EditForm>

@if (_signupFailed)
{
    <p class="alert-danger">Signup failed. Please try again!</p>
}

@code {
    // The server side code for the login page logic:
    // initialize a UserInfo Object to store the signup model data from the bound fields
    private readonly UserInfo _signupModel = new()
    {
        // The object must be initialised to a valid initial state to prevent null reference exceptions.
        Email = string.Empty,
        Password = string.Empty
    };
    
    // create a variable of boolean type to check if signup failed
    private bool _signupFailed;
    // this method is used to handle the main logic of checking signup.
    private void HandleSignup()
    {
        // check if the Signup method from the AccountService class has the user model data
        if (Credentials.Signup(_signupModel))
        {
            // use the built-in navigation to automatically direct the user to login section (login page) after Signup
            Navigation.NavigateTo("/login");
        }
        // otherwise the user didn't Sign up correctly, failing the condition, and setting the signupFailed variable to true
        else
        {
            _signupFailed = true;
        }
    }
}